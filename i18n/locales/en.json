{
  "nav": {
    "home": "Home",
    "docs": "Documentation",
    "showcase": "Showcase",
    "community": "Community",
    "blog": "Blog",
    "getStarted": "Get Started",
    "github": "GitHub"
  },
  "hero": {
    "title": "The Dart Backend Framework",
    "subtitle": "Build high-performance APIs and command-line tools with the elegance of Dart",
    "description": "Khadem is a modern, modular backend framework designed for developers who want clean architecture and lightning-fast performance.",
    "getStarted": "Get Started",
    "viewDocs": "View Documentation",
    "installCommand": "dart pub global activate khadem"
  },
  "features": {
    "title": "Why Choose Khadem?",
    "fast": {
      "title": "Developer-Friendly",
      "description": "Designed with simplicity in mind, Khadem lets you focus on writing clean, scalable code without boilerplate."  
    },
    "modular": {
      "title": "Modular Architecture",
      "description": "Clean separation of concerns with a powerful service container and dependency injection system."
    },
    "cli": {
      "title": "Developer-Friendly CLI",
      "description": "Intuitive command-line tools for project scaffolding, migrations, and deployment automation."
    },
    "docker": {
      "title": "Docker Integration",
      "description": "We're working on seamless Docker support to simplify deployment across environments."
    }
  },
  "codeExample": {
    "title": "Get Started in Minutes",
    "description": "Create a new Khadem project and start building immediately with our intuitive CLI."
  },
  "testimonials": {
    "title": "Trusted by Developers",
    "subtitle": "Join thousands of developers building the future with Khadem"
  },
  "footer": {
    "description": "The modern Dart backend framework for building scalable applications.",
    "quickLinks": "Quick Links",
    "community": "Community",
    "legal": "Legal",
    "privacy": "Privacy Policy",
    "terms": "Terms of Service",
    "license": "License"
  },
  "docs": {
    "search": "Search documentation...",
    "onThisPage": "On this page",
    "edit": "Edit this page",
    "lastUpdated": "Last updated",
    "warningMessage": "This documentation is currently under development. Some sections are incomplete or may contain inaccuracies."

  },
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "tryAgain": "Try Again",
    "close": "Close",
    "open": "Open",
    "menu": "Menu",
    "theme": "Theme",
    "language": "Language",
    "light": "Light",
    "dark": "Dark",
    "system": "System"
  },
  
    "legal": {
      "privacy": {
        "title": "Privacy Policy",
        "content": "We respect your privacy. Khadem does not track or collect personal data unless explicitly provided."
      },
      "terms": {
        "title": "Terms of Service",
        "content": "By using Khadem, you agree not to modify or redistribute the framework except through approved contributions."
      },
      "license": {
        "title": "License",
        "line1": "MIT License Â© 2025 Khedr Mahmoud",
        "line2": "Permission is granted to use Khadem for any purpose, but not to redistribute or rebrand it.",
        "line3": "See LICENSE file for full details."
      }
    },
    "scheduler": {
      "title": "Scheduler System",
      "description": "A powerful and flexible task scheduling system for Dart applications. Schedule jobs to run at specific intervals, handle retries, and monitor execution statistics.",
      "quickStart": {
        "title": "Quick Start",
        "installation": "Installation & Setup"
      },
      "coreConcepts": {
        "title": "Core Concepts",
        "scheduledTask": "ScheduledTask",
        "scheduledTaskDesc": "Represents a single scheduled task with its configuration, execution logic, and state management.",
        "taskName": "Unique task name for identification",
        "executionInterval": "Time interval between executions",
        "jobImplementation": "Job implementation to execute",
        "retryLogic": "Automatic retry on failure",
        "scheduledJob": "ScheduledJob",
        "scheduledJobDesc": "Interface for implementing the actual work that gets executed by scheduled tasks.",
        "jobName": "Unique job identifier",
        "executeMethod": "execute() method with business logic",
        "asyncSupport": "Full async/await support",
        "errorHandling": "Built-in error handling",
        "lifecycle": "Task Lifecycle",
        "created": "Created",
        "scheduled": "Scheduled",
        "executing": "Executing",
        "completed": "Completed"
      },
      "api": {
        "title": "API Reference",
        "schedulerEngine": "SchedulerEngine",
        "coreMethods": "Core Methods",
        "addDesc": "Add a new scheduled task",
        "stopDesc": "Stop a specific task",
        "stopAllDesc": "Stop all running tasks",
        "isRunningDesc": "Check if task is running",
        "controlMethods": "Control Methods",
        "pauseDesc": "Pause a task temporarily",
        "resumeDesc": "Resume a paused task",
        "getStatsDesc": "Get execution statistics",
        "activeTasksDesc": "List active task names",
        "scheduledTask": "ScheduledTask",
        "scheduledJob": "ScheduledJob",
        "scheduledJobDesc": "Abstract base class for implementing scheduled jobs. Override the execute() method with your business logic.",
        "taskStats": "TaskStats",
        "taskStatsProperties": "Properties",
        "nameDesc": "Task name",
        "lastRunDesc": "Last execution time",
        "nextRunDesc": "Next scheduled run",
        "successCountDesc": "Successful executions",
        "taskStatus": "TaskStatus Enum",
        "idleDesc": "Task is not running",
        "runningDesc": "Task is executing",
        "pausedDesc": "Task is paused",
        "failedDesc": "Task has failed"
      },
      "examples": {
        "title": "Usage Examples",
        "basicJob": "1. Basic Job Implementation",
        "taskCreation": "2. Task Creation and Scheduling",
        "configTasks": "3. Configuration-based Tasks",
        "monitoring": "4. Task Monitoring and Control"
      },
      "builtIn": {
        "title": "Built-in Jobs",
        "ping": "Ping Job",
        "pingDesc": "A simple job that logs a ping message. Useful for testing the scheduler or keeping services alive.",
        "pingUsage": "Use this job to verify scheduler is working or for heartbeat monitoring.",
        "ttlCleaner": "TTL Cache Cleaner",
        "ttlCleanerDesc": "Automatically removes expired cache files based on TTL (Time To Live) values.",
        "config": "Configuration:",
        "cachePath": "Path to cache directory"
      },
      "config": {
        "title": "Configuration",
        "file": "Configuration File (config/app.json)",
        "taskProperties": "Task Properties",
        "nameDesc": "Unique identifier for the task",
        "intervalDesc": "Execution interval in seconds",
        "jobDesc": "Name of the job to execute",
        "retryDesc": "Retry on failure (default: false)",
        "maxRetriesDesc": "Maximum retry attempts (default: 3)",
        "runOnceDesc": "Run only once (default: false)",
        "timezoneDesc": "Timezone for execution (default: UTC)",
        "customJobs": "Custom Job Registration",
        "customJobsDesc": "Register custom jobs before calling startSchedulers()"
      },
      "bestPractices": {
        "title": "Best Practices",
        "do": "Do",
        "useDescriptiveNames": "Use descriptive task names",
        "handleErrors": "Handle errors gracefully in jobs",
        "monitorTasks": "Monitor task execution and failures",
        "useConfig": "Use configuration files for task definitions",
        "keepJobsSimple": "Keep job logic simple and focused",
        "logImportant": "Log important events and errors",
        "considerations": "Performance Considerations",
        "intervalChoice": "Choose appropriate intervals",
        "resourceUsage": "Consider resource usage of jobs",
        "concurrentTasks": "Be aware of concurrent task execution",
        "memoryLeaks": "Avoid memory leaks in long-running jobs",
        "dont": "Don't",
        "blockingOperations": "Don't perform blocking operations",
        "infiniteLoops": "Don't create infinite loops",
        "hardcodedValues": "Don't hardcode configuration values",
        "ignoreErrors": "Don't ignore errors silently",
        "longRunning": "Don't make jobs unnecessarily long",
        "sharedState": "Don't rely on shared mutable state",
        "errorHandling": "Error Handling",
        "retryLogic": "Implement proper retry logic",
        "failureThresholds": "Set reasonable failure thresholds",
        "gracefulDegradation": "Plan for graceful degradation",
        "alerts": "Set up alerts for critical failures"
      },
      "troubleshooting": {
        "title": "Troubleshooting",
        "commonIssues": "Common Issues",
        "taskNotRunning": "Task Not Running",
        "checkTaskName": "Check if task name is unique",
        "verifyJob": "Verify job is properly registered",
        "checkLogs": "Check application logs for errors",
        "validateConfig": "Validate configuration syntax",
        "memoryIssues": "Memory Issues",
        "monitorResources": "Monitor resource usage",
        "limitConcurrency": "Limit concurrent task execution",
        "cleanupResources": "Ensure proper resource cleanup",
        "profileMemory": "Profile memory usage patterns",
        "debugging": "Debugging Tips"
      }
    }
  
  
}