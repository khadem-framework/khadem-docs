<template>
  <div>
    <h1>Production Deployment</h1>
    <p>Learn how to deploy your Khadem application to production environments with best practices for security, performance, and scalability.</p>

    <h2>Environment Configuration</h2>
    <p>Production environments require careful configuration for security and performance.</p>

    <h2>Environment Variables</h2>
    <CodeBlock language="bash" title=".env.production">
# Application Configuration
APP_NAME="Khadem App"
APP_ENV=production
APP_KEY=base64:your-32-character-secret-key-here
APP_DEBUG=false
APP_URL=https://yourdomain.com

# Database Configuration
DB_CONNECTION=pgsql
DB_HOST=localhost
DB_PORT=5432
DB_DATABASE=khadem_prod
DB_USERNAME=khadem_user
DB_PASSWORD=secure_password_here

# Redis Configuration
REDIS_HOST=localhost
REDIS_PASSWORD=null
REDIS_PORT=6379
REDIS_DB=0

# Cache Configuration
CACHE_DRIVER=redis
CACHE_PREFIX=khadem_cache

# Session Configuration
SESSION_DRIVER=redis
SESSION_LIFETIME=120
SESSION_ENCRYPT=false

# Queue Configuration
QUEUE_CONNECTION=redis
QUEUE_FAILED_DRIVER=database-uuids

# Mail Configuration
MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your-email@gmail.com
MAIL_FROM_NAME="${APP_NAME}"

# File Storage
FILESYSTEM_DISK=local
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=your-bucket-name

# Logging
LOG_CHANNEL=daily
LOG_LEVEL=error

# Security
SANCTUM_STATEFUL_DOMAINS=yourdomain.com
CORS_ALLOWED_ORIGINS=https://yourdomain.com
    </CodeBlock>

    <h2>Production Checklist</h2>
    <ul>
      <li>✅ Set APP_DEBUG=false</li>
      <li>✅ Use strong APP_KEY (32 characters)</li>
      <li>✅ Configure proper database credentials</li>
      <li>✅ Set up Redis for caching and sessions</li>
      <li>✅ Configure mail settings</li>
      <li>✅ Set up file storage (local or cloud)</li>
      <li>✅ Configure logging</li>
      <li>✅ Set up SSL/TLS certificates</li>
      <li>✅ Configure firewall rules</li>
      <li>✅ Set up monitoring and alerts</li>
      <li>✅ Configure backup strategy</li>
      <li>✅ Set up CI/CD pipeline</li>
    </ul>

    <h2>Server Requirements</h2>
    <CodeBlock language="bash" title="System Requirements">
# Minimum Requirements
- Ubuntu 20.04 LTS or CentOS 8+
- 2GB RAM (4GB recommended)
- 2 CPU cores (4 recommended)
- 20GB SSD storage
- Dart SDK 3.0+

# Recommended Stack
- Nginx or Apache
- PostgreSQL 13+ or MySQL 8+
- Redis 6+
- SSL certificate (Let's Encrypt)
- Firewall (ufw or firewalld)
    </CodeBlock>

    <h2>Server Setup</h2>
    <CodeBlock language="bash" title="Ubuntu Server Setup">
# Update system
sudo apt update && sudo apt upgrade -y

# Install required packages
sudo apt install -y curl wget gnupg2 software-properties-common

# Install Dart SDK
sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
sudo apt update
sudo apt install dart -y

# Verify Dart installation
dart --version

# Install PostgreSQL
sudo apt install postgresql postgresql-contrib -y
sudo systemctl start postgresql
sudo systemctl enable postgresql

# Create database and user
sudo -u postgres psql
CREATE DATABASE khadem_prod;
CREATE USER khadem_user WITH PASSWORD 'secure_password_here';
GRANT ALL PRIVILEGES ON DATABASE khadem_prod TO khadem_user;
\q

# Install Redis
sudo apt install redis-server -y
sudo systemctl start redis-server
sudo systemctl enable redis-server

# Install Nginx
sudo apt install nginx -y
sudo systemctl start nginx
sudo systemctl enable nginx
    </CodeBlock>

    <h2>Application Deployment</h2>
    <CodeBlock language="bash" title="Deployment Script">
#!/bin/bash

# Production deployment script for Khadem
set -e

echo "🚀 Starting Khadem production deployment..."

# Variables
APP_DIR="/var/www/khadem"
DOMAIN="yourdomain.com"
USER="khadem"

# Create application user
sudo useradd -m -s /bin/bash $USER || true

# Create application directory
sudo mkdir -p $APP_DIR
sudo chown $USER:$USER $APP_DIR

# Clone or update application
if [ ! -d "$APP_DIR/.git" ]; then
    sudo -u $USER git clone https://github.com/yourusername/khadem-app.git $APP_DIR
else
    cd $APP_DIR
    sudo -u $USER git pull origin main
fi

# Install dependencies
cd $APP_DIR
sudo -u $USER dart pub get

# Copy environment file
sudo -u $USER cp .env.example .env.production
# Edit .env.production with production values

# Run database migrations
sudo -u $USER dart run khadem migrate

# Build optimized executable
sudo -u $USER dart compile exe bin/server.dart -o bin/server

# Set proper permissions
sudo chown -R $USER:$USER $APP_DIR
sudo chmod -R 755 $APP_DIR
sudo chmod 600 $APP_DIR/.env.production

# Create systemd service
sudo tee /etc/systemd/system/khadem.service > /dev/null <<EOF
[Unit]
Description=Khadem Application
After=network.target postgresql.service redis-server.service

[Service]
Type=simple
User=$USER
WorkingDirectory=$APP_DIR
ExecStart=$APP_DIR/bin/server
Restart=always
RestartSec=5
Environment=APP_ENV=production

[Install]
WantedBy=multi-user.target
EOF

# Reload systemd and start service
sudo systemctl daemon-reload
sudo systemctl enable khadem
sudo systemctl start khadem

# Configure Nginx
sudo tee /etc/nginx/sites-available/$DOMAIN > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;

    # Redirect to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN www.$DOMAIN;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Root directory
    root $APP_DIR/public;
    index index.html;

    # API routes
    location /api/ {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Static files with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # Fallback to index.html for SPA
    location / {
        try_files $uri $uri/ /index.html;
    }
}
EOF

# Enable site
sudo ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

# Configure firewall
sudo ufw allow ssh
sudo ufw allow 'Nginx Full'
sudo ufw --force enable

# Set up SSL certificate with Let's Encrypt
sudo apt install certbot python3-certbot-nginx -y
sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN

# Set up log rotation
sudo tee /etc/logrotate.d/khadem > /dev/null <<EOF
$APP_DIR/storage/logs/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 $USER $USER
    postrotate
        systemctl reload khadem
    endscript
}
EOF

echo "✅ Deployment completed successfully!"
echo "🌐 Your application is now running at https://$DOMAIN"
    </CodeBlock>

    <h2>SSL Configuration</h2>
    <CodeBlock language="bash" title="SSL Setup with Let's Encrypt">
# Install Certbot
sudo apt install certbot python3-certbot-nginx -y

# Obtain SSL certificate
sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com

# Test certificate renewal
sudo certbot renew --dry-run

# Set up automatic renewal (runs twice daily)
sudo crontab -e
# Add this line:
# 0 */12 * * * /usr/bin/certbot renew --quiet
    </CodeBlock>

    <h2>Process Management</h2>
    <CodeBlock language="bash" title="Systemd Service Management">
# Start the application
sudo systemctl start khadem

# Stop the application
sudo systemctl stop khadem

# Restart the application
sudo systemctl restart khadem

# Check status
sudo systemctl status khadem

# View logs
sudo journalctl -u khadem -f

# Enable auto-start on boot
sudo systemctl enable khadem

# Disable auto-start
sudo systemctl disable khadem
    </CodeBlock>

    <h2>Database Backup</h2>
    <CodeBlock language="bash" title="Automated Database Backup">
#!/bin/bash

# Database backup script
BACKUP_DIR="/var/backups/khadem"
DATE=$(date +%Y%m%d_%H%M%S)
DB_NAME="khadem_prod"
DB_USER="khadem_user"

# Create backup directory
mkdir -p $BACKUP_DIR

# Create database backup
pg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_DIR/${DB_NAME}_${DATE}.sql

# Compress backup
gzip $BACKUP_DIR/${DB_NAME}_${DATE}.sql

# Keep only last 7 days of backups
find $BACKUP_DIR -name "*.sql.gz" -mtime +7 -delete

# Optional: Upload to cloud storage
# aws s3 cp $BACKUP_DIR/${DB_NAME}_${DATE}.sql.gz s3://your-backup-bucket/

echo "✅ Database backup completed: ${DB_NAME}_${DATE}.sql.gz"
    </CodeBlock>

    <h2>Monitoring Setup</h2>
    <CodeBlock language="bash" title="Monitoring with Prometheus and Grafana">
# Install Prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.40.0/prometheus-2.40.0.linux-amd64.tar.gz
tar xvf prometheus-2.40.0.linux-amd64.tar.gz
sudo mv prometheus-2.40.0.linux-amd64 /opt/prometheus

# Create Prometheus service
sudo tee /etc/systemd/system/prometheus.service > /dev/null <<EOF
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml --storage.tsdb.path=/opt/prometheus/data

[Install]
WantedBy=multi-user.target
EOF

# Install Grafana
sudo apt install -y apt-transport-https
sudo apt install -y software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
sudo apt update
sudo apt install grafana -y

# Start services
sudo systemctl start prometheus
sudo systemctl start grafana
sudo systemctl enable prometheus
sudo systemctl enable grafana
    </CodeBlock>

    <h2>Performance Optimization</h2>
    <ul>
      <li>Use connection pooling for database connections</li>
      <li>Implement caching for frequently accessed data</li>
      <li>Use CDN for static assets</li>
      <li>Enable gzip compression</li>
      <li>Optimize database queries</li>
      <li>Use Redis for session storage</li>
      <li>Implement rate limiting</li>
      <li>Set up horizontal scaling with load balancer</li>
    </ul>

    <h2>Security Best Practices</h2>
    <ul>
      <li>Keep system and dependencies updated</li>
      <li>Use strong passwords and SSH keys</li>
      <li>Configure firewall properly</li>
      <li>Use SSL/TLS for all connections</li>
      <li>Implement proper authentication and authorization</li>
      <li>Regular security audits and penetration testing</li>
      <li>Monitor logs for suspicious activities</li>
      <li>Use environment variables for sensitive data</li>
    </ul>

    <h2>Troubleshooting</h2>
    <CodeBlock language="bash" title="Common Issues and Solutions">
# Check application logs
sudo journalctl -u khadem -f

# Check Nginx error logs
sudo tail -f /var/log/nginx/error.log

# Test database connection
psql -U khadem_user -d khadem_prod -h localhost

# Check Redis connection
redis-cli ping

# Restart services
sudo systemctl restart khadem
sudo systemctl restart nginx
sudo systemctl restart postgresql
sudo systemctl restart redis-server

# Check disk space
df -h

# Check memory usage
free -h
    </CodeBlock>
  </div>
</template>

<script setup>
import CodeBlock from '~/components/CodeBlock.vue'
</script>
